// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: internal/proto/primecruncher-v2.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DispatcherService_GetJob_FullMethodName = "/primecruncher_v2.DispatcherService/GetJob"
)

// DispatcherServiceClient is the client API for DispatcherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DispatcherServiceClient interface {
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error)
}

type dispatcherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDispatcherServiceClient(cc grpc.ClientConnInterface) DispatcherServiceClient {
	return &dispatcherServiceClient{cc}
}

func (c *dispatcherServiceClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJobResponse)
	err := c.cc.Invoke(ctx, DispatcherService_GetJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DispatcherServiceServer is the server API for DispatcherService service.
// All implementations must embed UnimplementedDispatcherServiceServer
// for forward compatibility.
type DispatcherServiceServer interface {
	GetJob(context.Context, *GetJobRequest) (*GetJobResponse, error)
	mustEmbedUnimplementedDispatcherServiceServer()
}

// UnimplementedDispatcherServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDispatcherServiceServer struct{}

func (UnimplementedDispatcherServiceServer) GetJob(context.Context, *GetJobRequest) (*GetJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedDispatcherServiceServer) mustEmbedUnimplementedDispatcherServiceServer() {}
func (UnimplementedDispatcherServiceServer) testEmbeddedByValue()                           {}

// UnsafeDispatcherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DispatcherServiceServer will
// result in compilation errors.
type UnsafeDispatcherServiceServer interface {
	mustEmbedUnimplementedDispatcherServiceServer()
}

func RegisterDispatcherServiceServer(s grpc.ServiceRegistrar, srv DispatcherServiceServer) {
	// If the following call pancis, it indicates UnimplementedDispatcherServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DispatcherService_ServiceDesc, srv)
}

func _DispatcherService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DispatcherService_GetJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherServiceServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DispatcherService_ServiceDesc is the grpc.ServiceDesc for DispatcherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DispatcherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "primecruncher_v2.DispatcherService",
	HandlerType: (*DispatcherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJob",
			Handler:    _DispatcherService_GetJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/primecruncher-v2.proto",
}

const (
	ConsolidatorService_SubmitResult_FullMethodName     = "/primecruncher_v2.ConsolidatorService/SubmitResult"
	ConsolidatorService_RegisterWorker_FullMethodName   = "/primecruncher_v2.ConsolidatorService/RegisterWorker"
	ConsolidatorService_DeregisterWorker_FullMethodName = "/primecruncher_v2.ConsolidatorService/DeregisterWorker"
)

// ConsolidatorServiceClient is the client API for ConsolidatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsolidatorServiceClient interface {
	SubmitResult(ctx context.Context, in *SubmitResultRequest, opts ...grpc.CallOption) (*SubmitResultResponse, error)
	RegisterWorker(ctx context.Context, in *RegisterWorkerRequest, opts ...grpc.CallOption) (*RegisterWorkerResponse, error)
	DeregisterWorker(ctx context.Context, in *DeregisterWorkerRequest, opts ...grpc.CallOption) (*DeregisterWorkerResponse, error)
}

type consolidatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsolidatorServiceClient(cc grpc.ClientConnInterface) ConsolidatorServiceClient {
	return &consolidatorServiceClient{cc}
}

func (c *consolidatorServiceClient) SubmitResult(ctx context.Context, in *SubmitResultRequest, opts ...grpc.CallOption) (*SubmitResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitResultResponse)
	err := c.cc.Invoke(ctx, ConsolidatorService_SubmitResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consolidatorServiceClient) RegisterWorker(ctx context.Context, in *RegisterWorkerRequest, opts ...grpc.CallOption) (*RegisterWorkerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterWorkerResponse)
	err := c.cc.Invoke(ctx, ConsolidatorService_RegisterWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consolidatorServiceClient) DeregisterWorker(ctx context.Context, in *DeregisterWorkerRequest, opts ...grpc.CallOption) (*DeregisterWorkerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeregisterWorkerResponse)
	err := c.cc.Invoke(ctx, ConsolidatorService_DeregisterWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsolidatorServiceServer is the server API for ConsolidatorService service.
// All implementations must embed UnimplementedConsolidatorServiceServer
// for forward compatibility.
type ConsolidatorServiceServer interface {
	SubmitResult(context.Context, *SubmitResultRequest) (*SubmitResultResponse, error)
	RegisterWorker(context.Context, *RegisterWorkerRequest) (*RegisterWorkerResponse, error)
	DeregisterWorker(context.Context, *DeregisterWorkerRequest) (*DeregisterWorkerResponse, error)
	mustEmbedUnimplementedConsolidatorServiceServer()
}

// UnimplementedConsolidatorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConsolidatorServiceServer struct{}

func (UnimplementedConsolidatorServiceServer) SubmitResult(context.Context, *SubmitResultRequest) (*SubmitResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitResult not implemented")
}
func (UnimplementedConsolidatorServiceServer) RegisterWorker(context.Context, *RegisterWorkerRequest) (*RegisterWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWorker not implemented")
}
func (UnimplementedConsolidatorServiceServer) DeregisterWorker(context.Context, *DeregisterWorkerRequest) (*DeregisterWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterWorker not implemented")
}
func (UnimplementedConsolidatorServiceServer) mustEmbedUnimplementedConsolidatorServiceServer() {}
func (UnimplementedConsolidatorServiceServer) testEmbeddedByValue()                             {}

// UnsafeConsolidatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsolidatorServiceServer will
// result in compilation errors.
type UnsafeConsolidatorServiceServer interface {
	mustEmbedUnimplementedConsolidatorServiceServer()
}

func RegisterConsolidatorServiceServer(s grpc.ServiceRegistrar, srv ConsolidatorServiceServer) {
	// If the following call pancis, it indicates UnimplementedConsolidatorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConsolidatorService_ServiceDesc, srv)
}

func _ConsolidatorService_SubmitResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsolidatorServiceServer).SubmitResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsolidatorService_SubmitResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsolidatorServiceServer).SubmitResult(ctx, req.(*SubmitResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsolidatorService_RegisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsolidatorServiceServer).RegisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsolidatorService_RegisterWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsolidatorServiceServer).RegisterWorker(ctx, req.(*RegisterWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsolidatorService_DeregisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeregisterWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsolidatorServiceServer).DeregisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsolidatorService_DeregisterWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsolidatorServiceServer).DeregisterWorker(ctx, req.(*DeregisterWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsolidatorService_ServiceDesc is the grpc.ServiceDesc for ConsolidatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsolidatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "primecruncher_v2.ConsolidatorService",
	HandlerType: (*ConsolidatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitResult",
			Handler:    _ConsolidatorService_SubmitResult_Handler,
		},
		{
			MethodName: "RegisterWorker",
			Handler:    _ConsolidatorService_RegisterWorker_Handler,
		},
		{
			MethodName: "DeregisterWorker",
			Handler:    _ConsolidatorService_DeregisterWorker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/primecruncher-v2.proto",
}

const (
	FileServerService_FetchSegment_FullMethodName = "/primecruncher_v2.FileServerService/FetchSegment"
)

// FileServerServiceClient is the client API for FileServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServerServiceClient interface {
	FetchSegment(ctx context.Context, in *FetchSegmentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FetchSegmentResponse], error)
}

type fileServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServerServiceClient(cc grpc.ClientConnInterface) FileServerServiceClient {
	return &fileServerServiceClient{cc}
}

func (c *fileServerServiceClient) FetchSegment(ctx context.Context, in *FetchSegmentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FetchSegmentResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileServerService_ServiceDesc.Streams[0], FileServerService_FetchSegment_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FetchSegmentRequest, FetchSegmentResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileServerService_FetchSegmentClient = grpc.ServerStreamingClient[FetchSegmentResponse]

// FileServerServiceServer is the server API for FileServerService service.
// All implementations must embed UnimplementedFileServerServiceServer
// for forward compatibility.
type FileServerServiceServer interface {
	FetchSegment(*FetchSegmentRequest, grpc.ServerStreamingServer[FetchSegmentResponse]) error
	mustEmbedUnimplementedFileServerServiceServer()
}

// UnimplementedFileServerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileServerServiceServer struct{}

func (UnimplementedFileServerServiceServer) FetchSegment(*FetchSegmentRequest, grpc.ServerStreamingServer[FetchSegmentResponse]) error {
	return status.Errorf(codes.Unimplemented, "method FetchSegment not implemented")
}
func (UnimplementedFileServerServiceServer) mustEmbedUnimplementedFileServerServiceServer() {}
func (UnimplementedFileServerServiceServer) testEmbeddedByValue()                           {}

// UnsafeFileServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServerServiceServer will
// result in compilation errors.
type UnsafeFileServerServiceServer interface {
	mustEmbedUnimplementedFileServerServiceServer()
}

func RegisterFileServerServiceServer(s grpc.ServiceRegistrar, srv FileServerServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileServerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileServerService_ServiceDesc, srv)
}

func _FileServerService_FetchSegment_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchSegmentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServerServiceServer).FetchSegment(m, &grpc.GenericServerStream[FetchSegmentRequest, FetchSegmentResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileServerService_FetchSegmentServer = grpc.ServerStreamingServer[FetchSegmentResponse]

// FileServerService_ServiceDesc is the grpc.ServiceDesc for FileServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "primecruncher_v2.FileServerService",
	HandlerType: (*FileServerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchSegment",
			Handler:       _FileServerService_FetchSegment_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/proto/primecruncher-v2.proto",
}
